<?php
/**
 * @file
 * Install, update and uninstall functions for the search_api_db module.
 *
 */



/**
 * Implements hook_update_dependencies().
 */
function search_api_db_update_dependencies() {
  // This update should run after primary IDs have been changed to machine names
  // in the framework.
  $dependencies['search_api_db'][7101] = array(
    'search_api' => 7102,
  );
  return $dependencies;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7102() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7103() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7104() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7105() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7106() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_db_update_7107() { }

/**
 * Finds a free table name within the given database.
 *
 * Slightly modified copy of SearchApiDbService::findFreeTable().
 *
 * @param string $table
 *   The base table name to use, if available, or to modify otherwise.
 * @param DatabaseConnection $connection
 *   The database in which the table will be created.
 *
 * @return string
 *   A free table in the given database.
 */
function _search_api_db_update_find_free_table($table, DatabaseConnection $connection) {
  // A DB prefix might further reduce the maximum length of the table name.
  $maxbytes = 62;
  if ($db_prefix = $connection->tablePrefix()) {
    // Use strlen instead of backdrop_strlen since we want to measure bytes
    // instead of characters.
    $maxbytes -= strlen($db_prefix);
  }

  $base = $table = _search_api_db_mb_strcut($table, 0, $maxbytes);
  $i = 0;
  while ($connection->schema()->tableExists($table)) {
    $suffix = '_' . ++$i;
    $table = _search_api_db_mb_strcut($base, 0, $maxbytes - strlen($suffix)) . $suffix;
  }
  return $table;
}

/**
 * Emulates mb_strcut() if that is not available.
 *
 * Though the Mbstring PHP extension is recommended for running Backdrop, it is
 * not required. Therefore, we have to wrap calls to its functions.
 *
 * @param string $str
 *   The string being cut.
 * @param int $start
 *   Starting position in bytes.
 * @param int|null $length
 *   (optional) Length in bytes. If NULL is passed, extract all bytes to the
 *   end of the string.
 *
 * @return string
 *   The portion of $str specified by the $start and $length parameters.
 */
function _search_api_db_mb_strcut($str, $start, $length = NULL) {
  if (function_exists('mb_strcut')) {
    return mb_strcut($str, $start, $length);
  }
  return substr($str, $start, $length);
}

/**
 * Implements hook_update_last_removed().
 */
function search_api_db_update_last_removed() {
  return 7107;
}

/**
 * Implements hook_update_N().
 */
function search_api_db_update_1000() {
  $config = config('search_api_db.settings');
  $config->set('autocomplete_max_occurrences', update_variable_get('search_api_db_autocomplete_max_occurrences', 0.9));
  update_variable_del('search_api_db_autocomplete_max_occurrences');
}

